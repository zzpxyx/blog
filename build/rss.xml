<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[zzpxyx]]></title><description><![CDATA[zzpxyx]]></description><link>www.zzpxyx.com</link><generator>metalsmith-feed</generator><lastBuildDate>Sun, 21 Feb 2021 19:58:11 GMT</lastBuildDate><atom:link href="rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Converting Markdown Files]]></title><description><![CDATA[<p>Recently, I've found an acceptable workflow for converting a markdown file to a non-markdown-fashioned document.</p>
<p>I've been using markdown format for writing documents lately. I use heading level one for title and level two for &quot;the top-level sections&quot;. One problem is that sometimes I need to convert the document to a non-markdown-fashioned format like Google Doc. I tried rendering the markdown file in styled HTML and then copy-pasting the result in Google Doc directly. The result looks OK, but the major problem is that the heading levels are off by one, and I have to manually change them.</p>
<p>Then I found <code>pandoc</code>. It is not rarely known per se, but I found a very useful option called <code>--shift-heading-level-by=-1</code>. This solves my problem mentioned above exactly. All heading levels are shifted by one, and the heading level one used as the title in my markdown document is removed.</p>
<p>Now my workflow looks like this. I write in markdown format, use <code>pandoc</code> to convert it to raw HTML format with headings shifted by one, and finally copy-paste the HTML from browser to Google Doc. Google Doc can recognize and match most of the HTML tags to its built-in styles, except for the code style. This is totally acceptable for me before I encounter better solutions.</p>
]]></description><link>posts/converting-markdown-files</link><guid isPermaLink="true">posts/converting-markdown-files</guid></item><item><title><![CDATA[Ignoring Local Packages in Upgrade]]></title><description><![CDATA[<p>I've just found a way to ignore local packages when upgrading packages using Yay in Arch Linux.</p>
<p>I use Yay for managing packages on Arch Linux. As mentioned in <a href="https://www.zzpxyx.com/posts/switching-to-arch-linux-tex-live/">this post</a>, I use <code>tllocalmgr</code> to manually install some CTAN packages, mostly fonts. The consequence is that these packages only exist on my local machine. Every time I upgrade packages in Yay, it will prompt me that those packages don't have corresponding AUR packages. That isn't necessarily a bad thing, but I just want to hide it.</p>
<p>I came across <a href="https://github.com/Jguer/yay/issues/780">this issue</a> the other day. This afternoon, I finally decided to give it a try. All I did was to uncomment the <code>IgnorePkg</code> setting in <code>/etc/pacman.conf</code>, and added a package name pattern, so that it looked like this:</p>
<pre><code class="hljs"><span class="hljs-attr">IgnorePkg</span> = <span class="hljs-string">texlive-local-*</span>
</code></pre>
<p>It worked like a charm. Now, Yay no longer prompts missing AUR packages. Fortunately, we don't have official or AUR packages staring with <code>texlive-local-</code> at the moment.</p>
<p>This post is more like a memo to me as I know one day I will wonder where or how I did this.</p>
]]></description><link>posts/ignoring-local-packages-in-upgrade</link><guid isPermaLink="true">posts/ignoring-local-packages-in-upgrade</guid></item><item><title><![CDATA[Compile AppleScript for Performance]]></title><description><![CDATA[<p>Recently, I've found that compiling an AppleScript file may help with its performance.</p>
<p>I have this arguably weird workflow on a Mac where I can press Command+2 and Command+3 to switch to specific applications. I didn't find any open source solution for it, so I had to create some custom AppleScripts and bind them to global hotkeys in Karabiner-Elements. The setup worked for me until I upgraded to macOS Catalina, where the performance of the scripts was noticeably degraded. I had to wait for a few seconds before the application switching to the foreground.</p>
<p>I have to use the command <code>osascript</code> to run my custom AppleScript when the designated hotkey is triggered. I was reading its manual for some inspirations, and I actually found one at the bottom of the man page: <code>osacompile</code>, which can compile AppleScripts. I gave it a try using <code>osacompile -x</code> which is said to save the resulting script as execute only.  It didn't let me down. The execution performance of my script was improved drastically.</p>
<p>This is not the end of the story though. I've noticed that although the performance is improved in general, it doesn't eliminate the problem. Sometimes I still have to wait for a while for the script to finish. My guess is that something about AppleScript is changed in macOS Catalina, like the script interpretor or the built-in script functions. Maybe something about intercepting keyboard inputs is also changed so that Karabiner-Elements is slowed down.</p>
<p>That said, the general idea here may be helpful in certain cases. Maybe the next time when I'm dealing with scripts, I'll remember to check if there is a way to compile them.</p>
]]></description><link>posts/compile-applescript-for-performace</link><guid isPermaLink="true">posts/compile-applescript-for-performace</guid></item><item><title><![CDATA[Switching to Arch Linux TeX Live]]></title><description><![CDATA[<p>I've just switched my TeX Live distribution from the official one to the one on the Arch Linux repository.</p>
<p>I was just updating the packages routinely on Arch Linux, and I noticed that Texmaker now requires <code>texlive-core</code>, which in turn requires <code>texlive-bin</code>. This was problematic for me since I had already installed the official TeX Live distribution. This not only took more disk space, but also broke the functionality. For example, I was no longer able to compile my resume. My guess was that the new install somehow affected the TeX Live file tree and some style files were considered missing.</p>
<p>Up to this point, I had two options. I could uninstall Texmaker and its TeX Live dependencies, then reinstall Texmaker from another source and use it with the existing official TeX Live distribution on my machine. Alternatively, I could uninstall the official distribution and switch to the Arch Linux packaged version of TeX Live. Either option should work. I was just curious about the latter option, so I chose to give it a try. In addition, I had already changed my resume template to <a href="https://github.com/zzpxyx/two-column-resume">my custom one</a> long time ago, and it no longer needed unofficial fonts or stuff, so switching to another TeX Live distribution would only require installing missing CTAN packages.</p>
<p>First of all, I uninstalled the official distribution by:</p>
<pre><code class="hljs">tlmgr uninstall --all
</code></pre>
<p>There were some errors about write permission, but I did some quick check and the errors seemed benign. Then I installed <code>texlive-latexextra</code> for some commonly used LaTeX packages. After that, I tried to compile my resume and saw that some fonts were missing as expected. A quick search showed that I should install <code>texlive-fontsextra</code>. It would take over 1 GB of disk space since it included tons of fonts. I'm not a fan of this, so I chose to use <a href="https://wiki.archlinux.org/index.php/TeX_Live#tllocalmgr">tllocalmgr</a> to manually install missing CTAN packages. After some trial and error, I ended up with installing these CTAN packages: <code>raleway</code>, <code>mweights</code>, <code>droid</code>, <code>fontawesome</code>, and <code>ly1</code>. However, no PDF file was generated at the end of compile, and Texmaker didn't report any obvious error. The log did show that some fonts were missing. <code>tllocalmgr</code> mentioned that I should check its log and modify the <code>updmap.cfg</code> file as needed. After some trial and error again, I found that I would need to add the font maps like below for the fonts mentioned in the <code>tllocalmgr</code> log file.</p>
<pre><code class="hljs">updmap-sys --enable Map=Raleway.map
updmap-sys --enable Map=droidsans.map
updmap-sys --enable Map=droidsansmono.map
updmap-sys --enable Map=droidserif.map
updmap-sys --enable Map=fontawesome.map
</code></pre>
<p>I'm still a newbie for TeX Live, so what I did here may not be the best practice. After that, the compile worked and generated a PDF file.</p>
<p>I used <a href="https://pypi.org/project/diff-pdf-visually/">diff-pdf-visually</a> to compare the two PDF files from the two TeX Live distributions, and the tool reported no visual difference. I would take this as a sign of victory. If I'm understanding it correctly, I would no long need to upgrade TeX Live like <a href="../upgrading-tex-live">my previous post</a>.</p>
]]></description><link>posts/switching-to-arch-linux-tex-live</link><guid isPermaLink="true">posts/switching-to-arch-linux-tex-live</guid></item><item><title><![CDATA[Reviving an Old MP3 Player]]></title><description><![CDATA[<p>I've finally had the chance to jot down my adventure in reviving a very old MP3 player.</p>
<p>The player is made by Philips. I think the model number is something like SA2SPK02S/93. It is almost 10 years old, so by the time I tried to turn it on, nothing appeared on the screen. Not surprised at all.</p>
<p>Apparently the battery is already depleted and possibly over-discharged. It has a USB port for charging, so I connected it to my desktop machine. It appeared to be charging, and showed full battery really quickly. I disconnected it and then tried to turn it on, but it went into a weird boot loop. It showed that the battery was low, and then refused to do anything else. I also tried to charge it over a long period of time, but it didn't help.</p>
<p>I was about to give up before I got curious about its management software, Philips Songbird. Technically, this MP3 player can function very well on its own. I was just curious on what the management software was for. After fighting with some compatibility issues, I finally got the software running, and there was a firmware update option. No new firmware available. Not surprised at all, either. However, I could reinstall the existing firmware. I immediately gave it a try because why not?</p>
<p>That turned out to be the correct solution. After reinstalling the firmware, my desktop machine recognized the device, and charging was back to normal. Sometime later I gave the MP3 player a spin, and it worked well. Nice.</p>
<p>My guess is that somehow the internal battery level checker, hardware or software, had some errors. The MP3 player thought that it was fully charged, but actually only 2% or so. The boot process was disrupted due to low battery, which caused all kinds of weird issues. Finally, reinstalling the firmware calibrated the batter level checker or something, and made all problems go away.</p>
<p>I actually did this quite a while ago. Now, at the time of writing this post, the battery of that MP3 player is depleted again. Interestingly, this time everything works. The device is recognized by my desktop immediately, and charging seems fine. Maybe my guess above is not that bad.</p>
<p>To sum it up, reinstalling the firmware might be helpful when dealing with a dead battery. This probably doesn't work every time, but it's worth a try.</p>
]]></description><link>posts/reviving-an-old-mp3-player</link><guid isPermaLink="true">posts/reviving-an-old-mp3-player</guid></item><item><title><![CDATA[YAML Schema for Organizing Data]]></title><description><![CDATA[<p>I have an idea about using YAML Schema to organize data.</p>
<p>I came to this idea the other day when I was asked whether I had a certain vaccine in the past. All of a sudden, I wish I had organized my personal medical data in a structured way so that I could easily look it up. For easier discussion, let's use personal medical data as an example here.</p>
<p>First of all, I choose texts rather than database or any binary format because I want it to be readable and easy to maintain. I also want it to be organized, so I choose the YAML format where it's kind of both human- and machine-readable, yet doesn't require a lot of skeleton characters like JSON. On top of that, I add YAML Schema so that the data YAML file can be validated. It's also useful for auto-completion in editors that supports it. YAML Schema is based on JSON Schema, which is still work in progress. YAML Schema is also written in JSON at this moment.</p>
<p>Here is a snippet of YAML Schema that I use to organize my immunization history:</p>
<pre><code class="hljs"><span class="hljs-string">&quot;immunization&quot;</span>: {
  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Immunization history.&quot;</span>,
  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;array&quot;</span>,
  <span class="hljs-attr">&quot;items&quot;</span>: {
    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,
    <span class="hljs-attr">&quot;properties&quot;</span>: {
      <span class="hljs-attr">&quot;date&quot;</span>: {
        <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Date of the immunization.&quot;</span>,
        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>
      },
      <span class="hljs-attr">&quot;name&quot;</span>: {
        <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Immunization name.&quot;</span>,
        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>
      }
    },
    <span class="hljs-attr">&quot;required&quot;</span>: [<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>]
  },
  <span class="hljs-attr">&quot;uniqueItems&quot;</span>: <span class="hljs-literal">true</span>
}
</code></pre>
<p>Basically, I'm defining an array named <code>immunization</code>. Each element of the array is an object that has two properties, <code>date</code> and <code>name</code>, which are both strings. I don't think we have date-time type at the moment, so I have to use strings for dates. I'm also declaring that the elements should be unique in the array.</p>
<p>With the above schema, I can add and validate the following section in my data YAML file:</p>
<pre><code class="hljs"><span class="hljs-attr">immunization:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-attr">date:</span> <span class="hljs-number">2019</span><span class="hljs-string">/12/13</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">some</span> <span class="hljs-string">vaccine</span> <span class="hljs-number">1</span>
  <span class="hljs-bullet">-</span> <span class="hljs-attr">date:</span> <span class="hljs-number">2019</span><span class="hljs-string">/12/14</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">some</span> <span class="hljs-string">vaccine</span> <span class="hljs-number">2</span>
</code></pre>
<p>Similarly, I can add definitions for surgery history and other medical information. For complete syntax about YAML Schema and JSON Schema, see <a href="https://json-schema-everywhere.github.io/yaml">here</a>.</p>
<p>I'm using VS Code with the YAML plugin. It takes a bit of time to configure, but after that, I get the auto-completion when I'm editing the data YAML file.</p>
<p>Finally, it's worth pointing out that although the example here is for personal medical data, the idea of using YAML Schema can be applied to other structured data as well.</p>
]]></description><link>posts/yaml-schema-for-organizing-data</link><guid isPermaLink="true">posts/yaml-schema-for-organizing-data</guid></item><item><title><![CDATA[Turn It Off and On Again]]></title><description><![CDATA[<p>Turning it off and on again can solve numerous problems. Here is an on-going collection of such issues.</p>
<h3>SDL2</h3>
<p><a href="/posts/sdl2-renderer-error/">As mentioned previously</a>, SDL2 may give some errors after updating the display driver without a reboot.</p>
<h3>VPN</h3>
<p>Updating VPN-related packages without a reboot may give errors like:</p>
<pre><code class="hljs">mkdir: cannot create directory <span class="hljs-string">&#x27;/var/run/vpnc&#x27;</span>: Permission denied
</code></pre>
<p>Or</p>
<pre><code class="hljs">Failed to open tun device: No such device
</code></pre>
<h3>Monitor</h3>
<p>Recently, I've also encountered a weird issue on the ASUS MX279H monitor. It just turned on with a blank black screen, turned off immediately, and then repeated. I tried manually turning it off and on with the touch power button, but it didn't help. Finally, I had to unplug the power cord and re-plug it again. This time the monitor went back to normal.</p>
]]></description><link>posts/turn-it-off-and-on-again</link><guid isPermaLink="true">posts/turn-it-off-and-on-again</guid></item><item><title><![CDATA[Display Chinese in Pure Text Terminal]]></title><description><![CDATA[<p>Fbterm is the old tool I newly found for displaying Chinese characters in pure text terminal.</p>
<p>I had some display driver issues the other day and I couldn't launch the graphical interface on my desktop machine. I had to work under the pure text terminal. It doesn't support double width characters like Chinese, which happens to be my default displaying language. As a result, some command outputs just showed gibberish diamond characters. I had to change the language environment variable temporarily so that the output was switched to English. Out of curiosity, I started looking for a solution for displaying Chinese characters in pure text terminal.</p>
<p>After some searching and testing, I finally got <a href="https://code.google.com/archive/p/fbterm/">Fbterm</a>. It is also mentioned in the <a href="https://wiki.archlinux.org/index.php/Fbterm">Arch Linux wiki</a>. Basically, it is another terminal emulator that &quot;supports double width scripts like Chinese, Japanese, etc&quot;. Simply start it via the command <code>fbterm</code> in the pure text terminal, and Chinese characters should display correctly. For me, this is enough, so I didn't try adding Chinese input methods under Fbterm. I think it's technically possible.</p>
<p>Note one caveat though. The development for Fbterm has stopped a long time ago. I just use it occasionally, and I'd say that it is still pretty good at its own job.</p>
<p><strong>Updates on 2020-08-18:</strong> Apparently, Fbterm has been removed from AUR and its wiki page is archived due to package being too old. Although I believe one can still build it from the source, it's time to find an alternative. <a href="https://aur.archlinux.org/packages/zhcon/">zhcon</a> is by far the best one I've found. It even has a built-in Chinese input method. Awesome. Its user interface reminds me of the ancient UCDOS. Those were the days.</p>
]]></description><link>posts/display-chinese-in-pure-text-terminal</link><guid isPermaLink="true">posts/display-chinese-in-pure-text-terminal</guid></item><item><title><![CDATA[npm Without Sudo]]></title><description><![CDATA[<p>Recently, I have to reinstall npm. It's a good time to jot down how to install npm locally so that no sudo is required when using npm.</p>
<p>The whole story begins with this <a href="https://github.com/npm/npm/issues/19019">issue</a>. Basically, on my machine, npm 5.5.1 crashes every time when I try to update or install packages for Node.js 9.2.0. The solution is to uninstall npm and reinstall it with a higher version like 5.6.0.</p>
<p>It's debatable whether npm should be installed locally in the user home directory or at the system level. Personally, I prefer not using sudo for npm.</p>
<p>Here is the main <a href="https://stackoverflow.com/questions/10081293/install-npm-into-home-directory-with-distribution-nodejs-package-ubuntu/13021677#13021677">reference</a> on how to do this. For me, I did the following steps:</p>
<ol>
<li>Add <code>prefix=~/.npm-packages</code> to <code>~/.npmrc</code>.</li>
<li>Add the following lines to <code>~/.xprofile</code>:<pre><code class="hljs"><span class="hljs-comment"># Tell npm about the packages:</span>
<span class="hljs-built_in">export</span> NPM_PACKAGES=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.npm-packages&quot;</span>
<span class="hljs-comment"># Tell Node.js about the packages:</span>
<span class="hljs-built_in">export</span> NODE_PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$NPM_PACKAGES</span>/lib/node_modules&quot;</span>
<span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$NPM_PACKAGES</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span>
<span class="hljs-built_in">export</span> MANPATH=<span class="hljs-string">&quot;<span class="hljs-variable">$NPM_PACKAGES</span>/share/man:<span class="hljs-variable">$MANPATH</span>&quot;</span>
</code></pre>
</li>
<li>Reboot so that the new environment variables take effect.</li>
<li>Download the npm module from <a href="https://docs.npmjs.com/getting-started/installing-node">here</a>.</li>
<li>Install npm using the normal way: <code>./configure</code>, <code>make</code>, and <code>make install</code>.</li>
</ol>
<p>Note that the environment variable settings and where to put them are specific to my machine. You might have to change them to fit in your system.</p>
]]></description><link>posts/npm-without-sudo</link><guid isPermaLink="true">posts/npm-without-sudo</guid></item><item><title><![CDATA[SDL2 Renderer Error]]></title><description><![CDATA[<p>Long story short, remember to reboot after updating the graphics driver, especially before doing development in SDL2.</p>
<p>I have an SDL2 demo program that worked well yesterday, but it suddenly stops working today. <code>SDL_GetError()</code> shows an error of &quot;Couldn't find matching render driver&quot; in <code>SDL_CreateRenderer()</code>. Online searching shows some suggestions about checking the graphics driver. I didn't make any change in my graphics driver today, did I? Well, let's see. <code>pacman</code> log shows that I did update the nVIDIA driver package. After rebooting, the demo program works again. I'm not sure why but updating the driver package makes SDL2 think that I don't have a proper driver that supports hardware acceleration, although I'm using my window manager and other stuff just fine. Maybe this is a special one-time case, but I'll just jot it down here for memo.</p>
]]></description><link>posts/sdl2-renderer-error</link><guid isPermaLink="true">posts/sdl2-renderer-error</guid></item><item><title><![CDATA[Upgrading Tex Live]]></title><description><![CDATA[<p>Here is a memo for upgrading Tex Live.</p>
<p>It is the time of the year again -- upgrading Tex Live. Until we have a true rolling-released Tex Live, upgrading it will always mean reinstalling it. Below are some tips and pointers hoping to make the process less painful. Note that the memo is based on my personal preferences, so please take with a grain of salt.</p>
<h3>Uninstall</h3>
<p>First things first. <code>tlmgr</code> can actually handle the uninstallation with just one line:</p>
<pre><code class="hljs">tlmgr uninstall
</code></pre>
<p>There may be some leftover folders here and there, but it shouldn't affect the reinstalling process.</p>
<h3>Install</h3>
<p>Download the <a href="https://www.tug.org/texlive/acquire-netinstall.html">install script</a> <code>install-tl</code> and execute it. Personally, I would start with the medium scheme and drop unwanted collections like various languages and utilities. I should keep LuaTex. Also remember to use letter size by default.</p>
<h3>Post-install</h3>
<p>At the end of the script, it will mention that some environment variables contain the string &quot;tex&quot;. That is expected since uninstalling Tex Live will not change the environment variables. Simply update the paths in <code>~/.bashrc</code> to contain the correct Tex Live version.</p>
<h3>Additional Packages</h3>
<p>I also need some additional packages: <code>fontawesome</code>, <code>gillius</code>, <code>titlesec</code>, and <code>enumitem</code>. They can be installed via:</p>
<pre><code class="hljs">tlmgr install &lt;package&gt;
</code></pre>
<h3>Test</h3>
<p>Test the newly installed Tex Live through previously typeset documents. Make sure that there is no error and the output should be almost identical as before.</p>
]]></description><link>posts/upgrading-tex-live</link><guid isPermaLink="true">posts/upgrading-tex-live</guid></item><item><title><![CDATA[Icon Size in Xfce 4 Window Buttons]]></title><description><![CDATA[<p>I've just figured out how to change the icon size for Xfce 4 window buttons in task list.</p>
<p>I'm using the Arc Darker theme. I've configured the task list to only show window buttons so that they take less space in the top-right corner of the screen and play well with the title bar when a window is maximized. I always feel that the icons in the window buttons are too small.</p>
<p>The key to solve this problem is to figure out which style is applied to the window buttons. I know little about GTK themes, so here is my guessing and observations through trial and error.</p>
<p>For the Arc Darker theme, the base theme file on my Arch Linux is</p>
<pre><code class="hljs">/usr/share/themes/Arc-Darker/gtk-2.0/gtkrc
</code></pre>
<p>Looking at the content of the file, it includes other theme files. One of them is <code>panel.rc</code>, which seems promising.</p>
<p>At the end of <code>panel.rc</code>, there is a line that says</p>
<pre><code class="hljs">widget &quot;*XfceTasklist*&quot; style &quot;panelbuttons&quot;
</code></pre>
<p>I think this is what we need. Looking at the <code>panelButtons</code> style in the same file, <code>xthickness</code> is set to 4. I'm not exactly sure what this property means, but it seems that it is used for calculating various padding spaces. I change it to 2, and the icons immediately appear larger after switching to another theme and back. The smaller that value is, the larger the icons will be.</p>
<p>This solution has many drawbacks. For example, the modification may be overridden if I update the Arc theme package. For now, that's good enough for me.</p>
]]></description><link>posts/icon-size-in-xfce-4-window-buttons</link><guid isPermaLink="true">posts/icon-size-in-xfce-4-window-buttons</guid></item><item><title><![CDATA[bbm Font in TeX Live]]></title><description><![CDATA[<p>As a newbie in LaTeX, I just found that bbm and bbm-macros packages should be installed together.</p>
<p>I was trying to compile a LaTeX document using a customized TeX Live 2016. There was an error message about missing <code>bbm.sty</code>. Naively, I thought installing the bbm package would solve the problem. I tried, but the same error message appeared again.</p>
<p>After searching around, I got a hint about the bbm-macros package. I gave it a try by simply installing it, and it worked perfectly. It seems that the bbm package includes the fonts, and the bbm-macros package is for LaTeX support.</p>
<p>Another lesson learned is about the search options in TeX Live Manager. I was using the following line to search for bbm-related packages after installing the bbm package, and the result only showed bbm.</p>
<pre><code class="hljs">tlmgr search bbm
</code></pre>
<p>Later I learned that this would only search for the <em>installed</em> packages. To also search for uninstalled packages, I should have used this:</p>
<pre><code class="hljs">tlmgr search bbm --global
</code></pre>
]]></description><link>posts/bbm-font-in-tex-live</link><guid isPermaLink="true">posts/bbm-font-in-tex-live</guid></item><item><title><![CDATA[LxRun Issue in Windows 10 Bash Shell]]></title><description><![CDATA[<p>I've just found a workaround for an issue of setting the default user in Windows 10 Bash shell.</p>
<p>During installation of Windows 10 Bash shell, there is a step to set or create the default user. It's equivalent to executing the following command:</p>
<pre><code class="hljs">LxRun.exe /setdefaultuser &lt;username&gt;
</code></pre>
<p>If the Temp folder is not accessible, either because of privilege or unsupported file systems like RAM disk, an error message will appear:</p>
<pre><code class="hljs">/bin/bash: /mnt/d/TEMP/uid.txt: No such file or directory
</code></pre>
<p>Or</p>
<pre><code class="hljs">/bin/bash: /mnt/c/WINDOWS/TEMP/uid.txt: No such file or directory
</code></pre>
<p>The first error message appears when my Temp folder is on a RAM disk, and the second appears when I'm using the system-level Temp folder (<code>C:\Windows\Temp</code>).</p>
<p>The workaround is fairly simple. Just move the Temp folder to somewhere accessible, such as <code>%USERPROFILE%\AppData\Local\Temp</code>.</p>
<p>By the way, I've submitted an <a href="https://github.com/Microsoft/BashOnWindows/issues/752">issue</a> for this on GitHub.</p>
]]></description><link>posts/lxrun-issue-in-windows-10-bash-shell</link><guid isPermaLink="true">posts/lxrun-issue-in-windows-10-bash-shell</guid></item><item><title><![CDATA[Windows 10 on Acer 6935G]]></title><description><![CDATA[<p>Finally, I managed to upgrade to Windows 10 for my <em>8-year-old</em> laptop. I know, I know, I'm asking for trouble.</p>
<p>It all started with an error message last year. Nowadays, I seldom use the laptop as I have a much more powerful desktop (which is, well, nearly 5 years old). But when I do, I upgrade the operating system. I thought that it would be a piece of cake like upgrading to Windows 10 on my desktop machine, so I was shocked to see an error message saying that my laptop CPU was not supported. No, no, no, little upgrade assistant, my Acer 6935G has Intel Core 2 Duo P8600 processor, which has all the features you want. PAE, check. SSE2, check. NX, check. What else do you need? I searched all over the Internet, but I didn't find too much useful information, which was not a surprise considering the age of my laptop.</p>
<p>Frankly speaking, I was not very fascinated with Windows 10. Had I stopped right here, I would have much less trouble. However, I simply didn't (or couldn't). To me, this was a challenging puzzle and I really enjoyed trying to solve it.</p>
<p>One piece of information did give me some inspiration, but it was also a trap, well, kind of. It said that NX could have been disabled by BIOS, and it might require a BIOS update or hack to see the hidden options. I was not surprised at all to see that my &quot;up-to-date&quot; BIOS didn't have that option. Let's try BIOS hack, I thought.</p>
<p>I was lucky to find an old <a href="https://www.bios-mods.com/forum/Thread-UNLOCKED-ACER-6935G">unlocked version</a> of my BIOS. I was excited to see the hidden menu for advanced options, but I didn't see an option for NX. As a side finding, I saw the option for VT-x. I turned it on, but <a href="https://www.grc.com/securable.htm">SecurAble</a> still showed &quot;NO&quot; for hardware virtualization. It seemed that the hidden menu was uncovered, but that option for VT-x was not working for some reason.</p>
<p>I kept looking for other unlocked versions, but I didn't find any suitable one. I even flashed a wrong image of BIOS. Guess what? My laptop turned into a brick. Not surprised at all. Long story short: I had to tear apart the laptop, desolder the BIOS chip, re-program it, re-solder it, and then reassemble the laptop. Lessons learned: never flash a BIOS image if its size is different than the official one.</p>
<p>A year passed by quickly. Recently, I came across <a href="https://marcan.st/2009/06/enabling-intel-vt-on-the-aspire-8930g/">this post</a>. It is talking about enabling VT-x on Acer 8930G, which is a model very similar to my 6935G. I thought that a success in enabling VT-x would be a good step towards NX, so I gave it a try. Basically, I dumped out the runtime BIOS using an Ubuntu Live USB stick, used the script in that post to patch the image, and then flash it back (with size checking first, of course). This time SecurAble reports &quot;YES&quot; for VT-x. Nice. Let's see if we can turn on NX.</p>
<p>By the way, I launched Windows 10 upgrade program whenever I made some changes, but it always failed. Up till then, I had no luck.</p>
<p>I didn't expect it when I came upon <a href="https://www.reddit.com/r/windows/comments/39ckik/cpu_not_compatible_with_windows_10_upgrade/cttcked">this post</a> during Internet searching. The post mentions a Windows system setting that turns <em>off</em> NX. Guess which one? Surprise! It's the DEP setting! I had seen that setting for a million times, but I never realized that it would affect NX. I was astonished to see that Windows 10 started to upgrade without errors after this. What? Why? No! Yes!</p>
<p>Actually, that DEP setting might be the <em>only</em> step I need. Anyway, I did it.</p>
<p>Hopefully from my story, you can get some inspiration. Or amusement.</p>
]]></description><link>posts/windows-10-on-acer-6935g</link><guid isPermaLink="true">posts/windows-10-on-acer-6935g</guid></item><item><title><![CDATA[Cleaning pacman Cache]]></title><description><![CDATA[<p>I just learned how to clean pacman's package cache.</p>
<p>I came across this <a href="https://wiki.archlinux.org/index.php/pacman#Cleaning_the_package_cache">wiki page</a> when I was struggling with disk space the other day. It was then that I learned that pacman would keep <em>all</em> versions of downloaded packages, no matter whether the package is installed or not. Cleaning the cache is easy:</p>
<pre><code class="hljs">paccache -r
</code></pre>
<p>This will remove all cached versions except the most recent 3. There are more aggressive options as well mentioned in that wiki page, such as:</p>
<pre><code class="hljs">pacman -Sc
</code></pre>
<p>This will keep only the latest version for currently installed packages. Older versions and uninstalled packages will be removed. Of course, this is not recommended. However, as a fun fact, I used that command to regain over 22GB disk space.</p>
]]></description><link>posts/cleaning-pacman-cache</link><guid isPermaLink="true">posts/cleaning-pacman-cache</guid></item><item><title><![CDATA[List-Unsubscribe URL in Header]]></title><description><![CDATA[<p>I just found that the list unsubscribe URL could be in the email header.</p>
<p>I was trying to unsubscribe from a mailing list that I knew, but I couldn't find the unsubscribe button or link in the email. I poked around and found the unsubscribe URL in the email header. I visited that URL and it seemed to work well.</p>
<p>That being said, I strongly recommend <em>not</em> clicking on the unsubscribe link or button from an email that you don't know, because the URL may be phishing you.</p>
<p>If you know the sender and really need to uncover the unsubscribe URL, you might want to dig into menu items like &quot;email properties&quot;, &quot;email details&quot;, &quot;show header&quot;, etc.</p>
]]></description><link>posts/list-unsubscribe-url-in-header</link><guid isPermaLink="true">posts/list-unsubscribe-url-in-header</guid></item><item><title><![CDATA[Unzipping Chinese Filenames]]></title><description><![CDATA[<p>Unzipping a zip archive that has Chinese filenames inside is tricky. I haven't been able to find a perfect solution for quite a long time. Instead, I have to use a workaround. Recently, I came cross <a href="https://linuxtoy.org/archives/wrong-handling-of-chinese-coded-filename-in-fileroller-unzip.html">this post</a> which confirms my findings.</p>
<p>Let's talk about the issue first. Suppose I compress a file with a Chinese filename into a zip archive on the Windows platform. Now I want to extract that file on Linux. The <code>unzip</code> tool used to work perfectly with the <code>-O</code> option, but one day I found that the option was gone. Without that option, the extracted file will have a human unreadable filename.</p>
<p>The issue is caused by encoding for sure. The workaround is simple. Just find any unzipping utility that supports specifying encoding. To me, the best workaround would be <a href="http://unarchiver.c3.cx/commandline">Unarchiver (unar)</a> which I found in AUR previously. It worked well even without specifying encoding. The post mentioned at the beginning confirms this. In addition, the comments under that post also suggests a patched version of <code>unzip</code>, namely <code>unzip-iconv</code>, which adds back the <code>-O</code> option.</p>
]]></description><link>posts/unzipping-chinese-filenames</link><guid isPermaLink="true">posts/unzipping-chinese-filenames</guid></item><item><title><![CDATA[In-flight Texting Issue Solved]]></title><description><![CDATA[<p>I just found a tiny catch in sending in-flight Wi-Fi messages, and luckily I figured out what was wrong.</p>
<p>I was using T-Mobile's free in-flight texting the other day, but it didn't work as before. The progress bar on top of the iPhone stopped in the middle and got stuck.</p>
<p>It took me a while to realize what was wrong. It was because the text was sent as an iMessage, but the in-flight Wi-Fi texting actually required the text to be sent as a normal SMS. I thought this switching should have happened automatically, but it didn't for some reason.</p>
<p>Solving this issue is also easy. Just long press the message bubble and choose &quot;Send as Text Message&quot;. Or just turn off iMessage temporarily. However, turning back on iMessage might take quite a while, according to my testing.</p>
]]></description><link>posts/inflight-texting-issue-solved</link><guid isPermaLink="true">posts/inflight-texting-issue-solved</guid></item><item><title><![CDATA[Small Caps on Uppercase in CSS]]></title><description><![CDATA[<p>I just found out how to apply small caps to uppercase letters using CSS.</p>
<p>As a newbie in web design and typography, I was trying to apply small caps to abbreviations in the texts. I knew the following code:</p>
<pre><code class="hljs"><span class="hljs-selector-class">.small-caps</span> {
    <span class="hljs-attribute">font-variant</span>: small-caps;
}
</code></pre>
<p>However, it didn't work for the abbreviations which are all uppercase letters. I thought it was caused by the font since I could apply small caps to the navigation bar, but changing the font for the texts was not helpful. After some digging around I found that I need to transform the uppercase letters into lowercase first. In other words, I need:</p>
<pre><code class="hljs"><span class="hljs-selector-class">.small-caps</span> {
    <span class="hljs-attribute">text-transform</span>: lowercase;
    <span class="hljs-attribute">font-variant</span>: small-caps;
}
</code></pre>
<p>By the way, I didn't use small caps on abbreviations in the end. It felt unnatural. I think the best option would be using a native small caps font instead, but a matching one has to be found first.</p>
]]></description><link>posts/small-caps-on-uppercase-in-css</link><guid isPermaLink="true">posts/small-caps-on-uppercase-in-css</guid></item></channel></rss>